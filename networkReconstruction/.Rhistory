library(RCyjs)
biocGet("RCyjs")
library(RCyjs)
sessionInfo()
dir()
ls()
q()
dir("..")
library(RCyjs)
fromJSON("../submenu-simple/network.json")
text
text
?scan
scan("../submenu-simple/network.json", what=character(0), sep="\n")
text[1]
text[length(text)]
x
class(x)
length(x)
names(x)
x$data
class(x$elements)
names(x$elements)
head(x$elements$nodes)
edges
wdth(640)
edges
head(edges)
t(head(edges))
t(head(edges))
edges[1]
edges[1][1]
class(edges)
dim(edges)
edges[1,]
t(edges[1,])
nodes[1,]
tbl.nodes$data.name
colnames(tbl.nodes)
tbl.nodes$data
length(tbl.nodes)
names(tbl.nodes)
class(tbl.nodes$data)
dims(tbl.nodes$data)
dim(tbl.nodes$data)
head(tbl.nodes$data)
tbl.nodes
names(x$elements$nodes)
head(x$elements$nodes$position)
dim(x$elements$nodes$position)
head(tbl.nodes)
x
names(x$elements$edges)
head(x$elements$edges$data)
table(x$elements$edges$data$interaction)
head(x$elements$edges$group)
head(tbl.edges)
head(tbl.edges)
head(tbl.nodes)
head(tbl.nodes)
head(tbl.edges)
match(96, tbl.nodes$id)
tbl.nodes[match(96, tbl.nodes$id), "name")
tbl.nodes[match(96, tbl.nodes$id), "name"]
match(tbl.edges$source, tbl.nodes$id)
tbl.nodes[match(tbl.edges$source, tbl.nodes$id), "name"]
head(tbl.edges)
head(tbl.edges)
head(tbl.nodes)
head(tbl.nodes)
q()
source("go.R")
source("go.R")
head(tbl.edges)
head(tbl.nodes)
grep("2", tbl.nodes$name)
library(XML)
xmlParse("~/github/cellphone/cellphone.graphml")
xmlParse("nodeAttributes.xml")
traceback()
xmlParse("nodeAttributes.xml")
tbl.noa <- xmlParse("nodeAttributes.xml")
class(tbl.noa)
xmlToDataFrame( xmlParse("nodeAttributes.xml"))
dim(tbl.noa); dim(tbl.nodes)
head(tbl.noa)
head(tbl.noa[, c(5,6)])
merge(tbl.nodes, tbl.noa, by="name")
head(tbl.edges)
sub(tbl.edges$edgeType, " ", "")
sub(" ", "", tbl.edges$edgeType)
table(tbl.edges$edgeType)
head(tbl.edges)
head(tbl.edges)
head(tbl.edges)
head(tbl.edges)
head(tbl.edges)
subset(tbl.edges, "7C" %in% a)
subset(tbl.edges, a == "7C")
subset(tbl.edges, a == "7C" or b == "7C")
subset(tbl.edges, a == "7C" | b == "7C")
lapply(1:nrow(tbl.edges), function(i) paste(sort(tbl.edges$a[i], tbl.edges$b[i], sep=":")))
lapply(1:nrow(tbl.edges), function(i) paste(sort(tbl.edges$a[i], tbl.edges$b[i]), sep=":"))
lapply(1:nrow(tbl.edges), function(i) paste(c(sort(tbl.edges$a[i], tbl.edges$b[i])), sep=":"))
sort(tbl.edges$a[1], tbl.edges$b[1])
sort(c(tbl.edges$a[1], tbl.edges$b[1]))
paste(sort(c(tbl.edges$a[1], tbl.edges$b[1])), sep=":")
paste(sort(c(tbl.edges$a[1], tbl.edges$b[1])))
sort(c(tbl.edges$a[1], tbl.edges$b[1]))
paste(sort(c(tbl.edges$a[1], tbl.edges$b[1])))
sprintf("%s:%s", sort(c(tbl.edges$a[1], tbl.edges$b[1])))
lapply(1:nrow(tbl.edges), function(i) {nodes <- sort(tbl.edges$a[i], tbl.edges$b[i]); sprintf("%s:%s", nodes[1], nodes[2])})
lapply(1:nrow(tbl.edges), function(i) {nodes <- sort(c(tbl.edges$a[i], tbl.edges$b[i])); sprintf("%s:%s", nodes[1], nodes[2])})
unlist(lapply(1:nrow(tbl.edges), function(i) {nodes <- sort(c(tbl.edges$a[i], tbl.edges$b[i])); sprintf("%s:%s", nodes[1], nodes[2])}))
head(tbl.edges)
which(duplicated(tbl.edges$signature)
)
head(tbl.edges)
simpleDemoGraph
head(tbl.nodes)
dim(tbl.nodes); head(tbl.nodes)
dim(tbl.nodes); head(tbl.nodes)
head(tbl.edges)
dim(tbl.edgesSub1); dim(tbl.edgesSub2)
head(tbl.edgesSub1)
simpleDemoGraph
traceback()
q()
source("go.R")
biocGet("BrowserViz")
biocGet("BrowserVizDemo")
library(BrowserVizDemo)
?BrowserVizDemo
bvd <- BrowserVizDemo(8000:8010)
plot(1:10, (1:10)^3)
plot(bvd, 1:10, (1:10)^3)
q()
source("go.R")
system.file(package="BrowserViz", "scripts", "viz.html")
file.exists(system.file(package="BrowserViz", "scripts", "viz.html"))
args(RCyjs)
biocGet("base64enc")
q()
source("go.R")
edges(g1)
tbl.edgesSub1
head(tbl.edgesSub1)
edges(g1)
addGraph
edges(g2)
httpSetStyle(rcy, "vizmap.json")
httpSetStyle(rcy, "vizmap.json")
httpSetStyle(rcy, "vizmap.json")
source("go.R")
selectNodes(rcy, "3D")
fitSelectedContent(rcy)
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "vizmap.json")
httpSetStyle(rcy, "vizmap.json")
httpSetStyle(rcy, "style.js")
fit(rcy)
head(dups)
tbl.edges[4,]
clearSelection(rcy)
selectNodes(rcy, c("7B", "7C"))
fitSelectedContent(rcy)
subset(tbl.edges, signature=="7B:7C")
edges(g2)["7B"]
edges(g1)["7B"]
edges(g1)["7C"]
addGraph
selectMethod("addGraph", "RCyjs")
showMethods("addGraph")
selectMethod("addGraph", "RCyjsClass")
selectMethod("addGraph", "RCyjs")
g2
selectMethod("addGraph", "RCyjs")
source("~/s/RCyjs/inst/unitTests/test_RCyjs.R")
test.httpAddGraphToExistingGraph()
g1
g2
edgesData(g2)
edgeData(g2)
edgeData(g1)
edgeData(g1, attr="edgeType")
edgeData(g1, tbl.edgesSub1$a, tbl.edgesSub1$b, attr="edgeType") <- tbl.edgesSub1$edgeType
edgeData(g1, attr="edgeType")
edgeData(g2, attr="edgeType")
fit(rcy)
layout(rcy, "cose")
layoutStrategies(rcy)
layout(rcy, "random")
layout(rcy, "grid")
layout(rcy, "breadthfirst")
layout(rcy, "cose")
g
httpAddGraph(rcy, g)
httpAddGraph(rcy, g)
  httpAddGraph(rcy, g)
g1
edgeData(g1, attr="edgeType")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
fitSelectedContent(rcy)
q()
table(tbl.edges$reciprocal)
subset(tbl.edges, reciprocal==TRUE)
dup.signatures
subset(tbl.edges, signature %in% dup.signatures)
dim(subset(tbl.edges, signature %in% dup.signatures))
which(tbl.edges$signature %in% dup.signatures)
length(which(tbl.edges$signature %in% dup.signatures))
head(tbl.nodes); head(tbl.noa)
head(tbl.nodes); head(tbl.noa)
head(tbl.nodes)
head(tbl.nodes[, -1])
dim(tbl.edgesReciprocal); dim(tbl.edgesOneWay)
g
edgeData(g, attr="edgeType")
httpSetStyle(rcy, "styleTest.js")
httpSetStyle(rcy, "styleTest.js")
httpSetStyle(rcy, "styleTest.js")
httpSetStyle(rcy, "styleTest.js")
q()
source("go.R")
source("go.R")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
()
q()
source("go.R")
tbl.nodes
setPosition
selectMethod("setPosition", "RCyjsClass")
?setPosition
setPostion(rcy, tbl.nodes[, c(1,2,3)])
setPosition(rcy, tbl.nodes[, c(1,2,3)])
head(tbl.nodes)
x <- tbl.nodes [1:5, 1:3]
colnames(x) <- c("id", "x", "y")
x
setPosition(rcy, x)
x <- tbl.nodes [, 1:3]
colnames(x) <- c("id", "x", "y")
setPosition(rcy, x)
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
fit(rcy)
saveLayout(rcy, "layout.RData")
source("go.R")
restoreLayout(rcy, "layout.RData")
nodeData(g, "provider")
nodeData(g)
nodeData(g, "carrier")
nodeData(g, attr="carrier")
lapply(tbl.noa, class)
lapply(tbl.nodes, class)
lapply(tbl.nodes, class)
restoreLayout(rcy, "layout.RData")
fit(rcy)
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
head(tbl.edgesReciprocal)
which(duplicated(tbl.edgesReciprocal$signature))
head(tbl.edges)
which(duplicated(tbl.edges$signature))
subset(tbl.edgesReduced, signature=="2B:3E")
subset(tbl.edgesReduced, signature=="3E:2B")
edgeNames(g)
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
dim(tbl.edgesReduced)
dim(tbl.edges)
with(tbl.edgesReduced, print(signature))
edgeNames(g)
length(edgeNames(g))
grep("2B:3E", edgeNames(g))
grep("2B~3E", edgeNames(g))
grep("3E~2B", edgeNames(g))
fit(rcy)
fit(rcy)
saveLayout(rcy, "layout.RData")
table(as.character(nodeData(g, attr="carrier")))
httpSetStyle(rcy, "style.js")
table(as.character(nodeData(g, attr="carrier")))
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
fit(rcy)
fit(rcy)
fit(rcy)
httpSetStyle(rcy, "style.js")
fit(rcy)
fit(rcy)
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
saveLayout(rcy, "layout.RData")
source("go.R")
source("go.R")
head(tbl.nodes)
head(tbl.noa)
tbl.noa <- xmlToDataFrame( xmlParse("nodeAttributes.xml"))
head(tbl.noa)
lapply(tbl.noa, class)
lapply(tbl.noa, class)
lapply(tbl.noa, class)
head(tbl.nodes)
head(tbl.nodes)
head(tbl.nodes); head(tbl.noa)
head(tbl.nodes)
head(tbl.noa)
subset(tbl.nodes, camera==FALSE)
dim(tbl.nodes)
tbl.nodes
tbl.edges
head(tbl.edges)
g
head(tbl.edges)
tbl.edges
head(tbl.edges)
tbl.edges
head(tbl.edges)
dim(tbl.edges)
head(tbl.edges[order(tbl.edges$signature)])
head(tbl.edges[order(tbl.edges$signature),])
tbl.test
g
edgeNames(g)
edges(g)
args(addNode)
q()
source("go.R")
tbl.test
tbl.edges
g
q()
g
q()
library(RCyjs); packageVersion("RCyjs")
tbl.test
fit(rcy)
httpSetStyle(rcy, "~/s/RCyjs/inst/unitTests/style.js")
httpSetStyle("style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
httpSetStyle(rcy, "style.js")
q()
